{"ast":null,"code":"import _objectSpread from \"E:\\\\Web Dev\\\\Complete React Dev2020\\\\Course Projects\\\\react-online-store-app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n//Firebase configuration and setup:\n//A.\nimport firebase from \"firebase/app\"; //B.\n//for the database\n\nimport \"firebase/firestore\"; //C.\n//for the authentication\n\nimport \"firebase/auth\"; //D.\n\nconst config = {\n  apiKey: \"AIzaSyDm0Y6cSdOXp4sFJDBugo1C0g2dhv1SrgM\",\n  authDomain: \"react-online-store-app-3a252.firebaseapp.com\",\n  databaseURL: \"https://react-online-store-app-3a252.firebaseio.com\",\n  projectId: \"react-online-store-app-3a252\",\n  storageBucket: \"react-online-store-app-3a252.appspot.com\",\n  messagingSenderId: \"560602626333\",\n  appId: \"1:560602626333:web:e22989e1a849b888de49f4\",\n  measurementId: \"G-QFHBNHWM4B\"\n}; //E.\n\nfirebase.initializeApp(config); //storing user DB\n\nexport const auth = firebase.auth(); //from import \"firebase/auth\";\n\nexport const firestore = firebase.firestore(); //import \"firebase/firestore\";\n//creating a func to allows us to take that user we logged on with in Firebase,\n//and store it (the user) inside our DB in Firebase.\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //If there is (no user logged in), exit from this function (return;).\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // //The snapShot simply respresents data:\n\n  const snapShot = await userRef.get(); //The actuall data we want to store in the DB, when the users logs:\n\n  if (!snapShot.exists) {\n    //if snapshot doesn't exist\n    const displayName = userAuth.displayName,\n          email = userAuth.email; //we want  displayname, email from userAuth.\n\n    const createdAt = new Date(); //the current date and time for this event.\n\n    try {\n      await userRef.set(_objectSpread({\n        //.set = creates a new document object\n        displayName,\n        //with all these properties on it inside the DB.\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n\n    ;\n  }\n\n  return userRef;\n}; // fetch the data from firestore:\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  //new transformed collection array:\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //We need to use reduce() on the new transformed collection array:\n\n  return transformedCollection.reduce((accumilator, collection) => {\n    accumilator[collection.title.toLowerCase()] = collection;\n    return accumilator;\n  }, {});\n}; //==================================\n//to setup the google auth\n//1. To get access to the  GoogleAuthProvider() from Google Authenticator Library.\n\nconst provider = new firebase.auth.GoogleAuthProvider(); //2. We want to always triger the google popup whenever we use this Google\n// Auth Provider for authentication and sign in:\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); //3. to specify which sign in..the Google Authentication:\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase; //4. Next, from the Firebase website, configure how to enable the Google\n// Popup to Sign in.","map":{"version":3,"sources":["E:/Web Dev/Complete React Dev2020/Course Projects/react-online-store-app/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumilator","collection","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["//Firebase configuration and setup:\r\n//A.\r\nimport firebase from \"firebase/app\";\r\n\r\n//B.\r\n//for the database\r\nimport \"firebase/firestore\";\r\n\r\n//C.\r\n//for the authentication\r\nimport \"firebase/auth\";\r\n\r\n//D.\r\nconst config = {\r\n     apiKey: \"AIzaSyDm0Y6cSdOXp4sFJDBugo1C0g2dhv1SrgM\",\r\n     authDomain: \"react-online-store-app-3a252.firebaseapp.com\",\r\n     databaseURL: \"https://react-online-store-app-3a252.firebaseio.com\",\r\n     projectId: \"react-online-store-app-3a252\",\r\n     storageBucket: \"react-online-store-app-3a252.appspot.com\",\r\n     messagingSenderId: \"560602626333\",\r\n     appId: \"1:560602626333:web:e22989e1a849b888de49f4\",\r\n     measurementId: \"G-QFHBNHWM4B\"\r\n   };\r\n\r\n//E.\r\n  firebase.initializeApp(config);\r\n  \r\n//storing user DB\r\n\r\nexport const auth = firebase.auth();  //from import \"firebase/auth\";\r\nexport const firestore =firebase.firestore(); //import \"firebase/firestore\";\r\n\r\n//creating a func to allows us to take that user we logged on with in Firebase,\r\n//and store it (the user) inside our DB in Firebase.\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n\r\n//If there is (no user logged in), exit from this function (return;).\r\nif(!userAuth) return; \r\n\r\nconst userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n// //The snapShot simply respresents data:\r\nconst snapShot = await userRef.get();\r\n\r\n//The actuall data we want to store in the DB, when the users logs:\r\n  if(!snapShot.exists){  //if snapshot doesn't exist\r\n    const { displayName, email } = userAuth   //we want  displayname, email from userAuth.\r\n    const createdAt = new Date();   //the current date and time for this event.\r\n\r\n    try {\r\n      await userRef.set({   //.set = creates a new document object\r\n        displayName,        //with all these properties on it inside the DB.\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    };\r\n  }\r\n    return userRef;\r\n  \r\n} \r\n\r\n// fetch the data from firestore:\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n\r\n  //new transformed collection array:\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    }\r\n  });\r\n  \r\n //We need to use reduce() on the new transformed collection array:\r\n\r\n    return  transformedCollection.reduce( (accumilator, collection) => {\r\n\r\n      accumilator[collection.title.toLowerCase()] = collection;\r\n      return accumilator;\r\n    } , {});\r\n}\r\n\r\n//==================================\r\n\r\n//to setup the google auth\r\n\r\n//1. To get access to the  GoogleAuthProvider() from Google Authenticator Library.\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n//2. We want to always triger the google popup whenever we use this Google\r\n// Auth Provider for authentication and sign in:\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\n//3. to specify which sign in..the Google Authentication:\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n\r\n\r\n//4. Next, from the Firebase website, configure how to enable the Google\r\n// Popup to Sign in."]},"metadata":{},"sourceType":"module"}
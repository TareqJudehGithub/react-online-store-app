{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMEssage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMEssage\n}); // A func that returns another func that gets dispatched in it:\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    //A. redux creates the collectionRef:\n    const collectionRef = firestore.collection(\"collections\"); //B. then redux dispatches the action fetchCollectionsStart, which\n    //will switch the shop reducer state to true(default: ifFetching: false).\n\n    dispatch(fetchCollectionsStart()); //C. then redux begings this async request:\n    //to get the data from collections:\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["E:/Web Dev/Complete React Dev2020/Course Projects/react-online-store-app/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMEssage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAGA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACvCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADiB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,cAAD,KAAsB;AACxDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADkC;AAExDC,EAAAA,OAAO,EAAEF;AAF+C,CAAtB,CAAhC;AAIP,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AACrDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBAD+B;AAErDH,EAAAA,OAAO,EAAEE;AAF4C,CAAnB,CAAhC,C,CAKP;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAE3C,SAAOC,QAAQ,IAAI;AACnB;AACK,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CAFc,CAInB;AACA;;AACKF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CANc,CAQnB;AACA;;AACKY,IAAAA,aAAa,CACZE,GADD,GAECC,IAFD,CAEMC,QAAQ,IAAI;AAClB,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACJ,KALI,EAMJa,KANI,CAMEC,KAAK,IAAGP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CANlB;AAOJ,GAjBD;AAoBJ,CAtBM","sourcesContent":["import ShopActionTypes from \"./shop.types\";\r\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\r\n\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n     type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n     \r\n});\r\nexport const fetchCollectionsSuccess = (collectionsMap)  => ({\r\n     type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n     payload: collectionsMap\r\n});\r\nexport const fetchCollectionsFailure = (errorMEssage) => ({\r\n     type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n     payload: errorMEssage\r\n});\r\n\r\n// A func that returns another func that gets dispatched in it:\r\nexport const fetchCollectionsStartAsync = () => {\r\n     \r\n     return dispatch => {\r\n     //A. redux creates the collectionRef:\r\n          const collectionRef = firestore.collection(\"collections\");\r\n\r\n     //B. then redux dispatches the action fetchCollectionsStart, which\r\n     //will switch the shop reducer state to true(default: ifFetching: false).\r\n          dispatch(fetchCollectionsStart());\r\n\r\n     //C. then redux begings this async request:\r\n     //to get the data from collections:\r\n          collectionRef\r\n          .get()\r\n          .then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          dispatch(fetchCollectionsSuccess(collectionsMap));\r\n     })\r\n     .catch(error=> dispatch(fetchCollectionsFailure(error.message)));\r\n     };\r\n     \r\n     \r\n}    \r\n\r\n"]},"metadata":{},"sourceType":"module"}